name: Azure Site Extension

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Simulate Release"]
    types:
      - completed

env:
  SPEC_FILE_TEMPLATE: 'NewRelic.Azure.WebSites.Extension.NodeAgent.nuspec'

jobs:
  check_agent_availability: 
    runs-on: ubuntu-latest
    outputs:
      local_agent_version: ${{ steps.get-local-agent.outputs.localversion }}
      available_on_npm: ${{ steps.get-npm-agent.outputs.npmversion }}
      latest_is_available: ${{ steps.npm-agent-available.outputs.available }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}.x
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Get local agent version
        id: get-local-agent
        run: |
          echo "localversion=$(node -p 'require(`./package.json`).version')" >> $GITHUB_OUTPUT

      - name: Test local agent output
        run: |
          echo "Test local agent output localversion ${{ steps.get-local-agent.outputs.localversion }}"

      - name: Find agent version at npm
        id: get-npm-agent
        run: echo "npmversion=12.5.0" >> $GITHUB_OUTPUT
#          echo "npm_agent_version=$(npm view newrelic version)" >> $GITHUB_OUTPUT 

      - name: Test npm agent output
        run: |
          echo "Test npm agent output npmversion ${{ steps.get-local-agent.outputs.npmversion }}"

      - name: Check NPM availability
        id: npm-agent-available
        if: ${{ steps.get-local-agent.outputs.localversion != steps.get-npm-agent.outputs.npmversion }}
        run: |
          count=1
          seconds=15
          npmversion=''
          newVersionAvailble=false
          while(count < 6) { 
            seconds = seconds * count
            sleep seconds
            npmversion = npm view newrelic version
            echo "current iteration: ${{count}}. Waiting ${{seconds}} seconds."
            echo "npm version: ${{npmversion}}"
            echo "local version: ${{ steps.get-local-agent.outputs.localversion }}"
            newVersionAvailble = (npmversion == ${{ steps.get-local-agent.outputs.localversion }})
            echo "test result: ${{newVersionAvailble}}"
            if (newVersionAvailble) {
              echo "Versions are equal! We should break"
              break;
            }
            count++
          }
          echo "npm version after sleeping ${{npmversion}}"
          echo "available=${{newVersionAvailble}}" >> $GITHUB_OUTPUT
          if (!newVersionAvailble) {
            echo "Published agent version (${{npmversion}}) is behind local agent version (${{ steps.get-local-agent.outputs.localversion }}); exiting."
            exit 1;
          }
    
  create_extension_bundle:
    runs-on: windows-latest
    if:
      (github.event.workflow_run && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch')

    strategy:
      matrix:
        node-version: ['lts/*']
        arch: [ x64 ]

    needs: check_agent_availability
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup dotnet '6.0.x'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'
          
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          architecture: ${{ matrix.arch }}
          
      - name: Set package filename
        run: |
          echo "PACKAGE_FILENAME=ZLZZ.Azure.WebSites.Extension.NodeAgent.${{ needs.get-local-agent.outputs.localversion }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Verify environment vars # because we can't access GH env vars until the next step
        run: |
          echo "Agent version: ${{ needs.get-local-agent.outputs.localversion }}"
          echo "Package filename: ${{ env.PACKAGE_FILENAME }}"

#      - name: Install agent
#        working-directory: cloud-tooling/azure-site-extension/Content
#        run: |
#          npm i --prefix . newrelic@${{ env.AGENT_VERSION }}
#          echo "Agent installed"

#      - name: Configure package files
#        working-directory: cloud-tooling/azure-site-extension
#        run: |
#          (Get-Content ${{ env.SPEC_FILE_TEMPLATE }}).Replace('{VERSION}', "${{ env.AGENT_VERSION }}") | Set-Content ${{ env.PACKAGE_FILENAME }}.nuspec
#
#      - name: Create bundle
#        working-directory: cloud-tooling/azure-site-extension
#        run: nuget pack "${{ env.PACKAGE_FILENAME }}.nuspec"

      # This step is for us to check what's going to be published
#      - name: Archive package for verification
#        uses: actions/upload-artifact@v4
#        with:
#          name: azure-site-extension-test-${{ env.PACKAGE_FILENAME }}
#          path: cloud-tooling/azure-site-extension/${{ env.PACKAGE_FILENAME }}.nupkg

#      - name: Publish site extension
#        working-directory: cloud-tooling/azure-site-extension
#        run: |
#          dotnet nuget push "${{ env.PACKAGE_FILENAME }}.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source ${{ secrets.NUGET_SOURCE }}
